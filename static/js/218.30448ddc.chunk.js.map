{"version":3,"file":"static/js/218.30448ddc.chunk.js","mappings":"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","sources":["components/SignUpPage/AuthForm/AuthForm.js","components/SignUpPage/SignUpPage.js","pages/SignupPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { registerThunk } from 'redux/auth/authOperations';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport {\r\n  AuthFormButton,\r\n  AuthFormInput,\r\n  AuthFormLabel,\r\n  EyeBtn,\r\n  InputWrapper,\r\n  StyledErrorMessage,\r\n} from 'components/SignInForm/AuthForm/SignIn.styled';\r\nimport sprite from '../../../images/sprite.svg';\r\nimport toast from 'react-hot-toast';\r\nimport { Loader } from 'components/Loader';\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string()\r\n    .email('Invalid email format')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .min(8, 'Password must be at least 8 characters')\r\n    .max(64, 'Password must not exceed 64 characters')\r\n    .required('Password is required'),\r\n  repeatPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n    .required('Repeat password is required'),\r\n});\r\n\r\nexport const AuthForm = ({\r\n  emailLabel,\r\n  passwordLabel,\r\n  buttonLabel,\r\n  repeatPasswordLabel,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n  const navigate = useNavigate();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [emailUsed, setEmailUsed] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (emailUsed) {\r\n      toast.error('Email is already in use');\r\n      setEmailUsed(false);\r\n    }\r\n  }, [emailUsed]);\r\n\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(prevState => !prevState);\r\n  };\r\n\r\n  const handleSubmit = async ({ email, password }) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const data = await dispatch(\r\n        registerThunk({ name: 'V', email, password })\r\n      );\r\n\r\n      if (data.payload === 'Email already in use') {\r\n        setEmailUsed(true);\r\n      }\r\n      if (!!data.payload.user) navigate('/signin');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '', repeatPassword: '' }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ errors, touched, values, handleChange }) => {\r\n        return (\r\n          <Form>\r\n            <div>\r\n              <AuthFormLabel htmlFor=\"email\">{emailLabel}</AuthFormLabel>\r\n              <Field\r\n                as={AuthFormInput}\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"E-mail\"\r\n                required\r\n                className={`special ${\r\n                  errors.email && touched.email ? 'error' : ''\r\n                }`}\r\n              />\r\n              <StyledErrorMessage name=\"email\" component=\"div\" />\r\n            </div>\r\n            <div>\r\n              <AuthFormLabel htmlFor=\"password\">{passwordLabel}</AuthFormLabel>\r\n              <InputWrapper>\r\n                <Field\r\n                  as={AuthFormInput}\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  required\r\n                  className={`special ${\r\n                    errors.password && touched.password ? 'error' : ''\r\n                  }`}\r\n                />\r\n                <EyeBtn onClick={() => handleTogglePassword()} type=\"button\">\r\n                  <svg width=\"16\" height=\"16\" stroke=\"#407BFF\" fill=\"none\">\r\n                    <use\r\n                      xlinkHref={\r\n                        showPassword\r\n                          ? `${sprite}#icon-eye`\r\n                          : `${sprite}#icon-eye-slash`\r\n                      }\r\n                    />\r\n                  </svg>\r\n                </EyeBtn>\r\n              </InputWrapper>\r\n              <ErrorMessage name=\"password\" component=\"div\" />\r\n            </div>\r\n            {repeatPasswordLabel && (\r\n              <div>\r\n                <AuthFormLabel htmlFor=\"repeatPassword\">\r\n                  {repeatPasswordLabel}\r\n                </AuthFormLabel>\r\n                <InputWrapper>\r\n                  <Field\r\n                    as={AuthFormInput}\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    id=\"repeatPassword\"\r\n                    name=\"repeatPassword\"\r\n                    placeholder=\"Repeat password\"\r\n                    required\r\n                    className={`special ${\r\n                      errors.repeatPassword && touched.repeatPassword\r\n                        ? 'error'\r\n                        : ''\r\n                    }`}\r\n                  />\r\n                  <EyeBtn onClick={() => handleTogglePassword()} type=\"button\">\r\n                    <svg width=\"16\" height=\"16\" stroke=\"#407BFF\" fill=\"none\">\r\n                      <use\r\n                        xlinkHref={\r\n                          showPassword\r\n                            ? `${sprite}#icon-eye`\r\n                            : `${sprite}#icon-eye-slash`\r\n                        }\r\n                      />\r\n                    </svg>\r\n                  </EyeBtn>\r\n                </InputWrapper>\r\n                <ErrorMessage name=\"repeatPassword\" component=\"div\" />\r\n              </div>\r\n            )}\r\n            <div>\r\n              <AuthFormButton type=\"submit\">{buttonLabel}</AuthFormButton>\r\n            </div>\r\n            {isLoading && <Loader />}\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import { AuthForm } from './AuthForm/AuthForm';\r\nimport {\r\n  SignUpContainer,\r\n  SignLink,\r\n  TitleForm,\r\n} from 'components/SignInForm/AuthForm/SignIn.styled';\r\n\r\nexport const SignUpPage = () => {\r\n  return (\r\n    <SignUpContainer>\r\n      <TitleForm>Sign Up</TitleForm>\r\n      <AuthForm\r\n        emailLabel=\"Enter your email\"\r\n        passwordLabel=\"Enter your password\"\r\n        repeatPasswordLabel=\"Repeat password\"\r\n        buttonLabel=\"Sign Up\"\r\n      />\r\n      <SignLink to=\"/signin\">Sign In</SignLink>\r\n    </SignUpContainer>\r\n  );\r\n};\r\n","import { AuthPagesWrapper } from 'components/ForgotPassword/ForgotPassword.styled';\r\nimport { SignUpPage } from 'components/SignUpPage/SignUpPage';\r\n\r\nexport default function Register() {\r\n  return (\r\n    <AuthPagesWrapper>\r\n      <SignUpPage />\r\n    </AuthPagesWrapper>\r\n  );\r\n}\r\n"],"names":["validationSchema","Yup","email","required","password","min","max","repeatPassword","oneOf","AuthForm","_ref","emailLabel","passwordLabel","buttonLabel","repeatPasswordLabel","dispatch","useDispatch","navigate","useNavigate","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","emailUsed","setEmailUsed","_useState5","_useState6","isLoading","setIsLoading","useEffect","toast","handleTogglePassword","prevState","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_ref2","data","_context","prev","next","registerThunk","name","sent","payload","user","finish","stop","_x","apply","arguments","_jsx","Formik","initialValues","onSubmit","children","_ref4","errors","touched","values","handleChange","_jsxs","Form","AuthFormLabel","htmlFor","Field","as","AuthFormInput","type","id","placeholder","className","concat","StyledErrorMessage","component","InputWrapper","EyeBtn","onClick","width","height","stroke","fill","xlinkHref","sprite","ErrorMessage","AuthFormButton","Loader","SignUpPage","SignUpContainer","TitleForm","SignLink","to","Register","AuthPagesWrapper"],"sourceRoot":""}