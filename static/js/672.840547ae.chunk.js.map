{"version":3,"file":"static/js/672.840547ae.chunk.js","mappings":"kWAkBMA,EAAmBC,EAAAA,GAAW,CAClCC,MAAOD,EAAAA,KACJC,MAAM,wBACNC,SAAS,qBACZC,SAAUH,EAAAA,KACPI,IAAI,EAAG,0CACPC,IAAI,GAAI,0CACRH,SAAS,0BAGDI,EAAW,SAAHC,GAAoD,IAA9CC,EAAUD,EAAVC,WAAYC,EAAaF,EAAbE,cAAeC,EAAWH,EAAXG,YAC9CC,GAAWC,EAAAA,EAAAA,MACjBC,GAAwCC,EAAAA,EAAAA,WAAS,GAAMC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAhDI,EAAYF,EAAA,GAAEG,EAAeH,EAAA,GACpCI,GAAoCL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAA5CE,EAAUD,EAAA,GAAEE,EAAaF,EAAA,GAChCG,GAAkCT,EAAAA,EAAAA,WAAS,GAAMU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAA1CE,EAASD,EAAA,GAAEE,EAAYF,EAAA,IAE9BG,EAAAA,EAAAA,YAAU,WACJN,IACFO,EAAAA,GAAAA,MAAY,8BACZN,GAAc,GAElB,GAAG,CAACD,IAEJ,IAIMQ,GAAWC,EAAAA,EAAAA,MAEXC,EAAY,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,EAAAC,GAAA,IAAAnC,EAAAE,EAAAkC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEE,OAFOvC,EAAKmC,EAALnC,MAAOE,EAAQiC,EAARjC,SAAQmC,EAAAC,KAAA,EAEzCb,GAAa,GAAMY,EAAAE,KAAA,EACA7B,GAAS8B,EAAAA,EAAAA,IAAW,CAAExC,MAAAA,EAAOE,SAAAA,KAAa,KAAD,GAAtDkC,EAAIC,EAAAI,MAECC,QAAQC,OACjBf,EAAS,SAGkB,wCAAzBQ,EAAKM,QAAQE,SACfvB,GAAc,GAEa,kBAAzBe,EAAKM,QAAQE,SACfjB,EAAAA,GAAAA,MAAY,iBAAiB,OAEX,OAFWU,EAAAC,KAAA,EAE/Bb,GAAa,GAAOY,EAAAQ,OAAA,4BAAAR,EAAAS,OAAA,GAAAZ,EAAA,sBAEvB,gBAjBiBa,GAAA,OAAAhB,EAAAiB,MAAA,KAAAC,UAAA,KAmBlB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAM,CACLC,cAAe,CAAEpD,MAAO,GAAIE,SAAU,IACtCJ,iBAAkBA,EAClBuD,SAAUvB,EAAawB,SAEtB,SAAAC,GAA0B,IAAvBC,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QACV,OACEC,EAAAA,EAAAA,MAACC,EAAAA,GAAI,CAAAL,SAAA,EACHI,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEJ,EAAAA,EAAAA,KAACU,EAAAA,GAAa,CAACC,QAAQ,QAAOP,SAAE/C,KAChC2C,EAAAA,EAAAA,KAACY,EAAAA,GAAa,CACZC,KAAK,QACLC,GAAG,QACHC,KAAK,QACLC,YAAY,SACZC,UAAS,WAAAC,OACPZ,EAAOxD,OAASyD,EAAQzD,MAAQ,QAAU,OAG9CkD,EAAAA,EAAAA,KAACmB,EAAAA,GAAkB,CAACJ,KAAK,QAAQK,UAAU,YAE7CZ,EAAAA,EAAAA,MAAA,OAAAJ,SAAA,EACEJ,EAAAA,EAAAA,KAACU,EAAAA,GAAa,CAACC,QAAQ,WAAUP,SAAE9C,KACnCkD,EAAAA,EAAAA,MAACa,EAAAA,GAAY,CAAAjB,SAAA,EACXJ,EAAAA,EAAAA,KAACY,EAAAA,GAAa,CACZC,KAAM/C,EAAe,OAAS,WAC9BgD,GAAG,WACHC,KAAK,WACLC,YAAY,WACZC,UAAS,WAAAC,OACPZ,EAAOtD,UAAYuD,EAAQvD,SAAW,QAAU,OAGpDgD,EAAAA,EAAAA,KAACsB,EAAAA,GAAM,CAACC,QAAS,WA1D7BxD,GAAgB,SAAAyD,GAAS,OAAKA,CAAS,GA0DkB,EAAEX,KAAK,SAAQT,UAC1DJ,EAAAA,EAAAA,KAAA,OAAKyB,MAAM,KAAKC,OAAO,KAAKC,OAAO,UAAUC,KAAK,OAAMxB,UACtDJ,EAAAA,EAAAA,KAAA,OACE6B,UACc,GAAAX,OACLY,EAAAA,EADPhE,EACa,YACA,6BAMvBkC,EAAAA,EAAAA,KAACmB,EAAAA,GAAkB,CACjBJ,KAAK,WACLK,UAAU,MACVH,UAAU,sBAGdjB,EAAAA,EAAAA,KAAC+B,EAAAA,GAAc,CAAClB,KAAK,SAAQT,SAAE7C,IAC9Be,IAAa0B,EAAAA,EAAAA,KAACgC,EAAAA,EAAM,MAG3B,GAGN,EC1HaC,EAAa,WACxB,OACEzB,EAAAA,EAAAA,MAAC0B,EAAAA,GAAe,CAAA9B,SAAA,EACdJ,EAAAA,EAAAA,KAACmC,EAAAA,GAAS,CAAA/B,SAAC,aACXJ,EAAAA,EAAAA,KAAC7C,EAAQ,CACPE,WAAW,mBACXC,cAAc,sBACdC,YAAY,aAEdyC,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAACC,GAAG,mBAAkBjC,SAAC,2BAChCJ,EAAAA,EAAAA,KAACoC,EAAAA,GAAQ,CAACC,GAAG,UAASjC,SAAC,cAG7B,ECbe,SAASkC,IACtB,OACEtC,EAAAA,EAAAA,KAACuC,EAAAA,GAAgB,CAAAnC,UACfJ,EAAAA,EAAAA,KAACiC,EAAU,KAGjB,C","sources":["components/SignInForm/AuthForm/AuthForm.js","components/SignInForm/SignInForm.js","pages/SigninPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {\r\n  AuthFormLabel,\r\n  AuthFormButton,\r\n  AuthFormInput,\r\n  StyledErrorMessage,\r\n  EyeBtn,\r\n  InputWrapper,\r\n} from './SignIn.styled';\r\nimport { useDispatch } from 'react-redux';\r\nimport { loginThunk } from 'redux/auth/authOperations';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport sprite from '../../../images/sprite.svg';\r\nimport toast from 'react-hot-toast';\r\nimport { Loader } from 'components/Loader';\r\n\r\nconst validationSchema = Yup.object({\r\n  email: Yup.string()\r\n    .email('Invalid email format')\r\n    .required('Email is required'),\r\n  password: Yup.string()\r\n    .min(8, 'Password must be at least 8 characters')\r\n    .max(64, 'Password must not exceed 64 characters')\r\n    .required('Password is required'),\r\n});\r\n\r\nexport const AuthForm = ({ emailLabel, passwordLabel, buttonLabel }) => {\r\n  const dispatch = useDispatch();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [emailWrong, setEmailWrong] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (emailWrong) {\r\n      toast.error('Email or password is wrong');\r\n      setEmailWrong(false);\r\n    }\r\n  }, [emailWrong]);\r\n\r\n  const handleTogglePassword = () => {\r\n    setShowPassword(prevState => !prevState);\r\n  };\r\n\r\n  const navigate = useNavigate();\r\n\r\n  const handleSubmit = async ({ email, password }) => {\r\n    try {\r\n      setIsLoading(true);\r\n      const data = await dispatch(loginThunk({ email, password }));\r\n\r\n      if (!!data.payload.token) {\r\n        navigate('/home');\r\n      }\r\n\r\n      if (data.payload.message === 'Request failed with status code 401') {\r\n        setEmailWrong(true);\r\n      }\r\n      if (data.payload.message === 'Network Error')\r\n        toast.error('Network error');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={{ email: '', password: '' }}\r\n      validationSchema={validationSchema}\r\n      onSubmit={handleSubmit}\r\n    >\r\n      {({ errors, touched }) => {\r\n        return (\r\n          <Form>\r\n            <div>\r\n              <AuthFormLabel htmlFor=\"email\">{emailLabel}</AuthFormLabel>\r\n              <AuthFormInput\r\n                type=\"email\"\r\n                id=\"email\"\r\n                name=\"email\"\r\n                placeholder=\"E-mail\"\r\n                className={`special ${\r\n                  errors.email && touched.email ? 'error' : ''\r\n                }`}\r\n              />\r\n              <StyledErrorMessage name=\"email\" component=\"div\" />\r\n            </div>\r\n            <div>\r\n              <AuthFormLabel htmlFor=\"password\">{passwordLabel}</AuthFormLabel>\r\n              <InputWrapper>\r\n                <AuthFormInput\r\n                  type={showPassword ? 'text' : 'password'}\r\n                  id=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  className={`special ${\r\n                    errors.password && touched.password ? 'error' : ''\r\n                  }`}\r\n                />\r\n                <EyeBtn onClick={() => handleTogglePassword()} type=\"button\">\r\n                  <svg width=\"16\" height=\"16\" stroke=\"#407BFF\" fill=\"none\">\r\n                    <use\r\n                      xlinkHref={\r\n                        showPassword\r\n                          ? `${sprite}#icon-eye`\r\n                          : `${sprite}#icon-eye-slash`\r\n                      }\r\n                    />\r\n                  </svg>\r\n                </EyeBtn>\r\n              </InputWrapper>\r\n              <StyledErrorMessage\r\n                name=\"password\"\r\n                component=\"div\"\r\n                className=\"error-message\"\r\n              />\r\n            </div>\r\n            <AuthFormButton type=\"submit\">{buttonLabel}</AuthFormButton>\r\n            {isLoading && <Loader />}\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n","import { AuthForm } from './AuthForm/AuthForm';\r\nimport { SignInContainer, SignLink, TitleForm } from './AuthForm/SignIn.styled';\r\n\r\nexport const SignInForm = () => {\r\n  return (\r\n    <SignInContainer>\r\n      <TitleForm>Sign In</TitleForm>\r\n      <AuthForm\r\n        emailLabel=\"Enter your email\"\r\n        passwordLabel=\"Enter your password\"\r\n        buttonLabel=\"Sign In\"\r\n      />\r\n      <SignLink to=\"/forgot-password\">Forgot your password?</SignLink>\r\n      <SignLink to=\"/signup\">Sign Up</SignLink>\r\n    </SignInContainer>\r\n  );\r\n};\r\n","import { AuthPagesWrapper } from 'components/ForgotPassword/ForgotPassword.styled';\r\nimport { SignInForm } from 'components/SignInForm/SignInForm';\r\n\r\nexport default function Signin() {\r\n  return (\r\n    <AuthPagesWrapper>\r\n      <SignInForm />\r\n    </AuthPagesWrapper>\r\n  );\r\n}\r\n"],"names":["validationSchema","Yup","email","required","password","min","max","AuthForm","_ref","emailLabel","passwordLabel","buttonLabel","dispatch","useDispatch","_useState","useState","_useState2","_slicedToArray","showPassword","setShowPassword","_useState3","_useState4","emailWrong","setEmailWrong","_useState5","_useState6","isLoading","setIsLoading","useEffect","toast","navigate","useNavigate","handleSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","_callee","_ref2","data","_context","prev","next","loginThunk","sent","payload","token","message","finish","stop","_x","apply","arguments","_jsx","Formik","initialValues","onSubmit","children","_ref4","errors","touched","_jsxs","Form","AuthFormLabel","htmlFor","AuthFormInput","type","id","name","placeholder","className","concat","StyledErrorMessage","component","InputWrapper","EyeBtn","onClick","prevState","width","height","stroke","fill","xlinkHref","sprite","AuthFormButton","Loader","SignInForm","SignInContainer","TitleForm","SignLink","to","Signin","AuthPagesWrapper"],"sourceRoot":""}